# -*- coding: utf-8 -*-
"""fiturRekomendasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wQigPyApAsOEUxaNOUChw52zr9y4AuGQ

# Preparation
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

okt22 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/okt22.csv')
nov22 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/nov22.csv')
des22 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/des22.csv')
jan23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/jan23.csv')
feb23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/feb23.csv')
mar23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/mar23.csv')
apr23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/apr23.csv')
mei23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/mei23.csv')
jun23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/jun23.csv')
jul23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/jul23.csv')
agu23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/agu23.csv')
sep23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/sep23.csv')
okt23 = pd.read_csv('/content/drive/MyDrive/Magang/dataset/okt22.csv')

df=pd.concat([okt22, nov22, des22, jan23, feb23, mar23, apr23, mei23, jun23, jul23, agu23, sep23,okt23],ignore_index = True)
df.Created_at = pd.to_datetime(df.Created_at)

df = df.drop_duplicates()

df

def calculate_vp_sat(T):
    return 6.1078 * 10 ** (7.5 * T / (237.3 + T))
df['vp_sat'] = df['Temperature'].apply(calculate_vp_sat)

def calculate_vpd(row):
    return ((1 - (row['Humidity']/100)) * row['vp_sat']/10)

df['VPD'] = df.apply(calculate_vpd, axis=1)

df['Year'] = df['Created_at'].dt.year
df['Month'] = df['Created_at'].dt.month
df['Day'] = df['Created_at'].dt.day

df['hours'] = df['Created_at'].dt.hour
df['minutes'] = df['Created_at'].dt.minute

df.loc[(df['hours']>=0) & (df['hours']<6),'Condition']='Night'
df.loc[(df['hours']>=6) & (df['hours']<18),'Condition']='Day'
df.loc[(df['hours']>=18) & (df['hours']<24),'Condition']='Night'

day=df.loc[df['Condition']=='Day']
night=df.loc[df['Condition']=='Night']

print('Day Shape :', day.shape)
print('Night Shape :', night.shape)

df['Created_at'] = pd.to_datetime(df['Created_at'])
result = df.groupby(['Year', 'Month', 'Day', 'hours'])[['Temperature', 'Humidity', 'Intensity', 'VPD']].mean().reset_index()
result['Condition'] = df.groupby(['Year', 'Month', 'Day', 'hours'])['Condition'].first().values
df =result

df

"""## Recomendation Feature"""

import pandas as pd

def determine_condition(temperature, humidity, intensity, vpd):
    if (21 <= temperature <= 27 and 16 <= humidity <= 18.5) or (16 <= temperature <= 20 or 28 <= temperature <= 30):
        return "Good"
    elif (temperature < 10 or temperature > 30) or (humidity < 40 or humidity > 90) or (intensity < 3000 or intensity > 30000) or (vpd < 0.4 or vpd > 1.2):
        return "Bad"
    else:
        return "Warning"

def generate_recommendation(temperature, humidity, intensity, vpd):
    condition = determine_condition(temperature, humidity, intensity, vpd)

    if condition == "Good":
        return "Kondisi sudah ideal. Tidak diperlukan tindakan korektif."
    elif condition == "Warning":
        return "Kondisi sedang dalam peringatan. Pertimbangkan untuk melakukan tindakan korektif."
    elif condition == "Bad":
        return "Kondisi buruk. Lakukan tindakan korektif segera, seperti melakukan penyiraman tambahan atau menutup paranet."

def chatbot_interaction():
    print("Selamat datang di Greenhouse Assistance Chatbot!")
    print("Masukkan kondisi saat ini untuk mendapatkan rekomendasi.")

    temperature = float(input("Masukkan suhu (Celsius): "))
    humidity = float(input("Masukkan kelembaban (%): "))
    intensity = float(input("Masukkan intensitas cahaya (lx): "))
    vpd = float(input("Masukkan nilai VPD (kPa): "))
    condition = determine_condition(temperature, humidity, intensity, vpd)
    recommendation = generate_recommendation(temperature, humidity, intensity, vpd)

    print("\nKondisi saat ini:", condition)
    print("Rekomendasi Aksi:", recommendation)

chatbot_interaction()

def determine_condition(temperature, humidity, intensity, vpd):
    condition_rules = {
        "Good": {
            "temperature": (21, 27),
            "humidity": (60, 80),
            "intensity": (8000, 15000),
            "vpd": (0.8, 1.2),
        },
        "Warning": {
            "temperature": [(16, 20), (28, 30)],
            "humidity": [(40, 60), (80, 90)],
            "intensity": [(3000, 7999), (15000, 30000)],
            "vpd": (0.4, 0.8),
        },
        "Bad": {
            "temperature": [(-float('inf'), 10), (30, float('inf'))],
            "humidity": [(-float('inf'), 40), (90, float('inf'))],
            "intensity": [(-float('inf'), 3000), (30000, float('inf'))],
            "vpd": [(-float('inf'), 0.4), (1.2, float('inf'))],
        }
    }

    for condition, rules in condition_rules.items():
        if all(
            (rule[0] <= value <= rule[1] if isinstance(rule, tuple) else any(rule[0] <= value <= rule[1] for rule in rules))
            for value, rule in zip([temperature, humidity, intensity, vpd], rules.values())
        ):
            return condition

    return "Undefined"

def generate_recommendation(condition):
    recommendations = {
        "Good": "Kondisi sudah ideal. Tidak diperlukan tindakan korektif.",
        "Warning": "Kondisi sedang dalam peringatan. Pertimbangkan untuk melakukan tindakan korektif.",
        "Bad": "Kondisi buruk. Lakukan tindakan korektif segera, seperti melakukan penyiraman tambahan atau menutup paranet.",
        "Undefined": "Kondisi tidak dapat ditentukan. Periksa kembali input data."
    }

    return recommendations.get(condition, "Kondisi tidak dapat ditentukan. Periksa kembali input data.")

# Contoh penggunaan
temperature = 25
humidity = 70
intensity = 12000
vpd = 1.0

condition = determine_condition(temperature, humidity, intensity, vpd)
recommendation = generate_recommendation(condition)

print("Kondisi saat ini:", condition)
print("Rekomendasi Aksi:", recommendation)